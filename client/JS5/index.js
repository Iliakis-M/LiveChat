"use strict";function asyncGeneratorStep(a,b,c,d,e,f,g){try{var h=a[f](g),i=h.value}catch(a){return void c(a)}h.done?b(i):Promise.resolve(i).then(d,e)}function _asyncToGenerator(a){return function(){var b=this,c=arguments;return new Promise(function(d,e){function f(a){asyncGeneratorStep(h,d,e,f,g,"next",a)}function g(a){asyncGeneratorStep(h,d,e,f,g,"throw",a)}var h=a.apply(b,c);f(void 0)})}}var text={area:null,send:null,room:null,user:null},scroll=100,historyIdx=0,hist=[""],maxHistory=50,rooms={},room="LOBBY",last=0,users={},shift=!1,prefix="!!",threshold=800;for(window.has=[],window.nick=getCookie("user")||"guest_"+Math.round(1e5*Math.random());!(nick=prompt("Insert a Nickname:",nick||getCookie("user")))||!/^[a-zA-Z0-9_\-();' ]+$/i.test(nick););function drop(a){var b=1<arguments.length&&arguments[1]!==void 0?arguments[1]:1;for(a=a.split(" ");b--;)a.shift();return a.join(" ")}//drop
function dropGet(a){var b=1<arguments.length&&arguments[1]!==void 0?arguments[1]:0;for(a=a.split(" ");b--;)a.shift();return a.shift()}//dropGet
function load(){return _load.apply(this,arguments)}//load
function _load(){return _load=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function a(){return regeneratorRuntime.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:console.log("Index loaded"),text.area=document.getElementById("msgarea"),text.send=document.getElementById("txtarea"),text.room=document.getElementById("rooms"),text.user=document.getElementById("appendUsers"),500>=window.innerWidth&&text.room.classList.add("shrink"),auth(nick),setCookie("user",nick),parseQueries(),resize(),Array.from(document.querySelectorAll("script, link, img, audio, iframe")).forEach(function(a){var b=a.src||a.href;b&&window.has.push(b.replace(/^https?:\/{2}.+?\//gmi,""))}),sock.on("message",/*#__PURE__*/function(){var a=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function a(b,c,d){return regeneratorRuntime.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:d==room&&message(b,c);case 1:case"end":return a.stop();}},a,this)}));return function(){return a.apply(this,arguments)}}()),sock.on("joinable",function(a,b){var c=a;if(a in rooms){var e=rooms[a];return void(e.onclick=function(){switchCur(a,b?void 0:"")})}a.startsWith("USR")&&(c="Private Channel\n (".concat(a,")"));var d=document.createElement("p");d.classList.add("channel"),d.innerHTML=c,d.onclick=function(){switchCur(a,b?void 0:"")},rooms[a]=d,text.room.appendChild(d)}),sock.on("user",function(a,b){if(!(a in users||b!=room)){var c=document.createElement("p");c.classList.add("user"),c.innerHTML=a,users[a]=c,text.user.appendChild(c)}}),sock.on("userout",function(a){a in users&&(users[a].remove(),delete users[a])}),sock.on("main",function(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:function(){};rooms[room].classList.remove("selected-chan"),rooms[a].classList.add("selected-chan"),b(room=a)}),sock.on("history",/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function a(){var b,c,d,e,f,g=arguments;return regeneratorRuntime.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:for(b=g.length,c=Array(b),d=0;d<b;d++)c[d]=g[d];for(e=0;e<c.length;e++)f=c[e],f.room==room&&message(f.content,f.user,new Date(f.timestamp).toDateString());case 2:case"end":return a.stop();}},a,this)}))),sock.once("connect",function(){text.area.innerHTML="",message("This is a Beta version of a chatting service, upcoming features are: profile picture support, multiple chatrooms and more security!","<font color='red'><b>SYSTEM</b></font>"),message("<b>THIS SERVER DOES NOT FOLLOW PRIVACY RULES!! USE AT YOUR OWN AGREEMENT (GDPR)</b>","<font color='red'><b>SYSTEM</b></font>"),message("<u>Please be kind and don't spam, we have means of banning aggitators.</u>","<font color='red'><b>SYSTEM</b></font>"),console.info("The prefix is !!, type !!help in chat for commands.")});case 18:case"end":return a.stop();}},a,this)})),_load.apply(this,arguments)}function parexp(){var a=!(0<arguments.length&&void 0!==arguments[0])||arguments[0];if(a)return setTimeout(parexp,300,!1);var b=60;return text.room.classList.contains("shrink-r")?(text.area.classList.add("msgarealeft"),b+=20,console.info(text.area.style.left)):text.area.classList.remove("msgarealeft"),text.user.parentNode.classList.contains("shrink-l")&&(b+=20),text.area.style.width=b+"%"}//parexp
function alrel(a){return alrel=function(){},alert(a),location.reload()}//alrel
function switchCur(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"LOBBY",b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:prompt("Password (Leave empty for public rooms or already authorized rooms)",""),c=!(2<arguments.length&&void 0!==arguments[2])||arguments[2];return sock.emit("switch",a,b,c),text.user.innerHTML="",users={},text.area.innerHTML=""}//switchCur
function send(){var msg=0<arguments.length&&void 0!==arguments[0]?arguments[0]:text.send.value;return(text.send.value="",msg.startsWith(prefix))?command(msg):(msg=msg.replace(/\${((.|\n)+?)}/gm,function(match,p){return eval(p)}),msg=msg.trim(),sendMessage(msg))}//send
function sendMessage(a){return a?Date.now()-last<=threshold?message("<font color='red'><b>Please wait ".concat(threshold/1e3,"s before sending another message!</b></font>"),"<font color='red'><b>SYSTEM</b></font>"):conn?(sock.send(a),last=Date.now()):message("<font color='red'><b>You cannot send messages while disconnected!</b></font>","<font color='red'><b>SYSTEM</b></font>"):message("<font color='red'><b>You cannot send an empty message!</b></font>","<font color='red'><b>SYSTEM</b></font>")}//sendMessage
function message(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:new Date().toDateString(),d=document.createElement("p");return d.innerHTML="<font color='gray'><small>".concat(c,"</small></font>&emsp;<b>").concat(b,":</b> ").concat(a,"<hr />"),text.area.appendChild(d),text.area.scrollBy?text.area.scrollBy(0,scroll):text.area.scrollTop+=scroll}//message
function shiftcheck(a){var b=!(1<arguments.length&&arguments[1]!==void 0)||arguments[1];if("Shift"==a.key)shift=b;else{if("ArrowUp"==a.key&&b)return++historyIdx,historyIdx%=hist.length,text.send.value=hist[historyIdx];if("ArrowUp"==a.key)return;if("ArrowDown"==a.key&&b)return historyIdx=1>historyIdx?hist.length-1:historyIdx-1,text.send.value=hist[historyIdx];if("ArrowDown"==a.key)return;if("Enter"==a.key&&!shift&&!b)for(send(),hist.unshift("");hist.length>=maxHistory;)hist.pop()}return hist[0]=text.send.value}//shiftcheck
function submit(){return shift=!1,shiftcheck({key:"Enter"},!1)}//submit
function sanitize(a){return a=a.replace(/&/gmi,"&amp;").replace(/</gmi,"&lt;").replace(/>/gmi,"&gt;").replace(/"/gmi,"&quot;").replace(/'/gmi,"&#039;"),a}//sanitize
function parseCookies(){var a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:document.cookie;return new Map(a.split(";").map(function(a){return a.split("=")}))}//parseCookies
function storeCookies(a){return document.cookie=Array.from(a).map(function(b){return b.join("=")}).join(";")}//storeCookies
function setCookie(a,b){var c=parseCookies();return c.set(a,b),storeCookies(c)}//setCookie
function getCookie(a){var b=parseCookies();return b.get(a)}//getCookie
function parseQueries(){var a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:location.href,b=a.split("?").pop().replace(/#.*?$/,"").split("&").map(function(a){return a.split("=")}),c=!0,d=!1,e=void 0;try{for(var f,g,h=b[Symbol.iterator]();!(c=(f=h.next()).done);c=!0)g=f.value,window[g.shift()]=g.pop()}catch(a){d=!0,e=a}finally{try{c||null==h.return||h.return()}finally{if(d)throw e}}}//parseQueries
window.addEventListener("DOMContentLoaded",load),window.addEventListener("resize",window.resize=function(){var a=document.getElementsByClassName("xpand");a[1].style.left=document.getElementById("ui-wrapper").offsetWidth-a[1].offsetWidth-a[0].offsetLeft+"px"});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,